#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require 'pp'
require 'yaml'

# For globmask
require_relative 'classes/dir'

# Project classes
require_relative 'classes/artifacts'
require_relative 'classes/project'
require_relative 'classes/generators'

# Small utility function to output the lovely banner.
def showBanner
	return unless $options.show_banner
	puts <<BANNER
   ____   ____   ____   ___________  ____  __ __  ______
  / ___\\_/ __ \\ /    \\_/ __ \\_  __ \\/  _ \\|  |  \\/  ___/
 / /_/  >  ___/|   |  \\  ___/|  | \\(  <_> )  |  /\\___ \\
 \\___  / \\___  >___|  /\\___  >__|   \\____/|____//____  >
\\_____/      \\/     \\/     \\/   project generator    \\/

BANNER
end


###############################################################################
# Options and parameters handling                                             #
###############################################################################

# Default values
DEFAULT_PROJECT_FILE = "generous.project"

# Default options
$options = OpenStruct.new(
	:show_banner    => true,
	:project_file   => DEFAULT_PROJECT_FILE,
	:current_config => 0,
	:generator      => nil
)

# TODO: Find a way to have generators add options to this.
begin
	OptionParser.new do |opts|
		opts.banner =  "Usage : #{File.basename $PROGRAM_NAME} [OPTION]..."
		opts.separator "Generates a project based on the configuration passed."

		opts.separator ""
		opts.separator "Global options"

		opts.on("-h", "--help", "Shows this help.") do
			showBanner
			puts opts
			exit
		end
		opts.on("--no-banner", "Do not output the ASCII art banner.") do
			$options.show_banner = false
		end

		opts.separator ""
		opts.separator "Project generation options"
		opts.on("--project-file", "=FILENAME", "Project file to use.", "Default: #{DEFAULT_PROJECT_FILE}") do |file|
			$options.project_file = file
		end
		opts.on("-c","--config","=CONFIGS", "The configuration to use when outputting.",
		                                    "Defaults to the first one.") do |config|
			$options.current_config = config
		end

		opts.separator ""
		opts.separator "Generator options"
		opts.on("--list-generators", "Prints a list of available generators.") do
			puts "List of available generators:"
			Generators.list_classes.each do |g|
				puts "  #{g}"
			end
			exit 0
		end

		opts.on("-g","--generator","=GENERATOR", "The generator to use.") do |generatorName|
			$options.generator = Generators.get_generator generatorName
		end

		opts.on("--list-generator-options", "Lists the options of the generator.") do
			unless $options.generator
				raise "The generator has to be selected before listing its options."
			end
			unless $options.generator.respond_to? "list_options"
				raise "The generator has no way to list its options."
			end
			$options.generator.list_options
			exit 0
		end
	end.parse!
rescue OptionParser::InvalidOption => e
	$stderr.puts "Error while parsing command-line input."
	$stderr.puts e.message.capitalize!
	exit 1
end
## This will show the banner.
showBanner


###############################################################################
# Project file parsing                                                        #
###############################################################################

# TODO: Create a class to handle the configuration (parsing, validating...)
# TODO: Check kwalify http://www.kuwata-lab.com/kwalify/
begin
	projectConfigFile = YAML::load(File.open($options.project_file))
rescue YAML::SyntaxError => e
	$stderr.puts "Error while analyzing YAML configuration."
	$stderr.puts e.message
	$stderr.puts "In file #{$options.project_file}"
	exit 1
rescue Errno::ENOENT => e
	# When the file does not exist.
	$stderr.puts e.message
	exit 1
end

project = Project.new projectConfigFile["name"];

# TODO: Clean this up... THIS STINKS AND IS A HACK.
# TODO: Handle multiple levels of includes, aka recursion
# TODO: Handle circular references as errors while recursing.
# This part handles merging configurations together. The current configuration is merged.
begin

	#TODO: Allow usage of a config name
	begin
		config = Integer($options.current_config)
	rescue ArgumentError => e
		$stderr.puts "Error while parsing string to integer."
		$stderr.puts e.message
		$stderr.puts ""
		$stderr.puts "TODO: Allow usage of a config name."
		exit 5
	end


	if projectConfigFile["configurations"][config].has_key? "include"

		temp = []

		projectConfigFile["configurations"][config]["include"].each do |included|
			temp = projectConfigFile["configurations"][config].merge included do |k, old, new|
				case k
					#When merging, we will always keep the original name.
					when "name"
						old
					when "artifacts"
						old.merge new do |oldkey, oldArtifact, newArtifact|
							oldArtifact.concat new[oldkey]
						end
					else
						$stderr.puts "I don't know how to merge these properties...'"
						$stderr.puts "TODO: Make this a warning and find a middle ground for merging..."
						$stderr.puts
						$stderr.puts "====>" + k
						$stderr.puts "==old"
						$stderr.puts old
						$stderr.puts "==new"
						$stderr.puts new
				end
			end
		end

		temp.delete "include"

		projectConfigFile["configurations"][config] = temp
	end
end

###############################################################################
# Artifacts handling                                                          #
###############################################################################

#TODO: Check other parameters passing in Artifacts... Right now it's a dumb array with [0] being filename, [1] being mask. When not a dumb array (thus, a string) it is converted in that format...
#The first one is technically the default one.
#TODO: Read which configuration to use
#TODO: Configuration names (required?)

#TODO: Artifacts for DEFINES
#TODO: Artifacts for libraries linked
#TODO: Artifacts for include directories

# Here I work out the artifacts.
projectConfigFile["configurations"][config]["artifacts"].each do |artifactName, artifactValues|
	unless Artifacts.const_defined? artifactName
		raise "Unknown artifact type: #{artifactName}"
	end

	artifactType = Artifacts.const_get artifactName

	artifactValues.each do |artifactValue|
		#TODO: De-hardcode the globbing here... Have some kind of magic for containing the initialization of artifacts through the glob...
		#TODO: Decouple the initialization of an Artifact from the parsing of the config? (Have the glob be applied while parsing the config instead?)
		if artifactType.superclass == Artifacts::FileBasedArtifact
			# When using a simple string, create the right array.
			if artifactValue.is_a? String
				artifactValue = [artifactValue, []]
			end
			Dir.globmask(artifactValue[0], artifactValue[1]).each do |file|
				project.add_artifact artifactType.new(file)
			end
		else
			project.add_artifact artifactType.new(artifactValue)
		end
	end
end


unless $options.generator
	$stderr.puts "A generator has not been selected."
	$stderr.puts "Please select a generator."
	exit 1
end
puts "Generating a project using #{$options.generator} generator."

$options.generator.new.generate project

puts "-----"
puts "Done."
puts "-----"